
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://flifjrvtjphhnxcqtxwx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZsaWZqcnZ0anBoaG54Y3F0eHd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ5OTg5OTgsImV4cCI6MjA2MDU3NDk5OH0.SfYrS-mK9plEcoutKnfpth40T-TAlu_88wdv39fLbUo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Define database table types for TypeScript to use
export type Tables = Database['public']['Tables'];
export type TablesInsert = {
  [K in keyof Tables]: Tables[K]['Insert']
};
export type TablesUpdate = {
  [K in keyof Tables]: Tables[K]['Update']
};
export type TablesRow = {
  [K in keyof Tables]: Tables[K]['Row']
};

// Required tables that should be in the database
export const requiredTables = [
  'lotteries',
  'lottery_participants',
  'lottery_winners',
  'products',
  'visuals',
  'orders',
  'order_items',
  'clients'
];

// Function to check if Supabase connection is working
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    // Try a simple query to see if the connection works
    const result = await supabase
      .from('pg_tables')
      .select('tablename')
      .eq('schemaname', 'public')
      .limit(1);
    
    console.log('Supabase connection check result:', result);
    
    // Return true if there's no error
    return !result.error;
  } catch (error) {
    console.error('Error checking Supabase connection:', error);
    return false;
  }
};

// Function to check if all required tables exist in the database
export const checkRequiredTables = async (): Promise<{ exists: boolean; missing: string[] }> => {
  try {
    // Get all tables in the public schema
    const { data, error } = await supabase
      .from('pg_tables')
      .select('tablename')
      .eq('schemaname', 'public');
    
    if (error) {
      console.error('Error checking required tables:', error);
      return { exists: false, missing: requiredTables };
    }
    
    // Extract table names
    const existingTables = data.map(row => row.tablename);
    
    // Find missing tables
    const missingTables = requiredTables.filter(table => !existingTables.includes(table));
    
    return {
      exists: missingTables.length === 0,
      missing: missingTables
    };
  } catch (error) {
    console.error('Error checking required tables:', error);
    return { exists: false, missing: requiredTables };
  }
};
